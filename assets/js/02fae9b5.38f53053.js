"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24948:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,s={type:"mdx",permalink:"/Iris/",source:"@site/pages/index.md",description:"Try the demo//www.roblox.com/games/11145814918/Iris-Demonstration",frontMatter:{}},l=[{value:"Try the demo: https://www.roblox.com/games/11145814918/Iris-Demonstration",id:"try-the-demo-httpswwwrobloxcomgames11145814918iris-demonstration",level:3},{value:"Usage",id:"usage",level:3},{value:"How it Works",id:"how-it-works",level:3},{value:"Credits",id:"credits",level:3}],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"try-the-demo-httpswwwrobloxcomgames11145814918iris-demonstration"},"Try the demo: ",(0,a.kt)("a",{parentName:"h3",href:"https://www.roblox.com/games/11145814918/Iris-Demonstration"},"https://www.roblox.com/games/11145814918/Iris-Demonstration")),(0,a.kt)("h1",{id:"iris"},"Iris"),(0,a.kt)("p",null,"Iris is an Immediate mode GUI Library for Roblox, Based on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ocornut/imgui"},"Dear ImGui"),". It aims to solve the same problems as Dear ImGui. It is fast, portable, and self-contained (no external dependencies)."),(0,a.kt)("p",null,"what is Dear ImGui, and why is it important?"),(0,a.kt)("sub",null,"Dear ImGui is best known for its widespread use for developing debug UI. Using the Dear ImGui paradigm (Immediate Mode), UI is remarkably easy. Because of this, Dear ImGui has seen adoption in almost every major game engine, including Unity and Unreal Engine (and now Roblox!)."),(0,a.kt)("p",null,"Iris favors simplicity and productivity; It is designed to simplify UI, streamlining the process for creating visualization, debug tools, and data input. To accomplish this, Iris offers a different approach to Roblox UI than existing libraries, lacking certain features commonly found in more intricate UI libraries. Iris opts to supercede the Roblox UI API, instead offering a streamlined Immediate-Mode library and a set of widgets to empower developers to create UI easily."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The Iris release comes as an rbxm or zip file. You can import the rbxm into any roblox project, and begin creating UI in any client side script. No external dependences are needed. Iris can be used in any kind of Roblox UI, including PlayerGui, CoreGui, BillboardGui, SurfaceGui, and PluginGui."),(0,a.kt)("p",null,"Heres a basic Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local StarterPlayerScripts = game.StarterPlayer.StarterPlayerScripts\nlocal Iris = require(StarterPlayerScripts.Client.Iris).Init()\n\nIris:Connect(function()\n    Iris.Window({"My First Window!"})\n        Iris.Text({"Hello, World"})\n        Iris.Button({"Save"})\n        Iris.InputNum({"Input"})\n    Iris.End()\nend)\n')),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{src:"https://raw.githubusercontent.com/Michael-48/Iris/main/assets/simpleDarkExample.png",alt:"Sample Display Output"})),(0,a.kt)("p",null,"And a more complex Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local StarterPlayerScripts = game.StarterPlayer.StarterPlayerScripts\nlocal Iris = require(StarterPlayerScripts.Client.Iris).Init()\n\nIris:Connect(function()\n    -- use a unique window size, rather than default\n    local windowSize = Iris.State(Vector2.new(300, 400))\n\n    Iris.Window({"My Second Window"}, {size = windowSize})\n        Iris.Text({"The current time is: " .. os.clock()})\n\n        Iris.InputText({"Enter Text"})\n\n        if Iris.Button({"Click me"}).clicked then\n            print("button was clicked")\n        end\n\n        Iris.Table({1})\n            for i = 0, 9 do\n                Iris.Button({"Button - " .. i})\n                Iris.NextColumn()\n            end\n        Iris.End()\n    Iris.End()\nend)\n')),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{src:"https://raw.githubusercontent.com/Michael-48/Iris/main/assets/complexDarkExample.png",alt:"Sample Display Output"})),(0,a.kt)("p",null,"The appearance of Iris is fully customizable; colors, fonts, transparencies, and layout are all customizable. By default, Iris comes with a dark theme and light theme, as well as 2 layout themes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"Iris.UpdateGlobalConfig(Iris.TemplateConfig.colorLight)\nIris.UpdateGlobalConfig(Iris.TemplateConfig.sizeClear)\n\nIris:Connect(Iris.ShowDemoWindow)\n")),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{src:"https://raw.githubusercontent.com/Michael-48/Iris/main/assets/simpleLightExample.png",alt:"Sample Display Output"})),(0,a.kt)("p",null,"Finally, Iris comes with a demo window, ",(0,a.kt)("inlineCode",{parentName:"p"},"Iris.ShowDemoWindow"),". This window demonstrates the functionality of every aspect of the library, and contains useful utilities, a style editor and a runtime information window. It is the most useful reference that you and other coders will want to refer to."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{src:"https://raw.githubusercontent.com/Michael-48/Iris/main/assets/demoWindow.png",alt:"Sample Display Output"})),(0,a.kt)("h3",{id:"how-it-works"},"How it Works"),(0,a.kt)("p",null,"Iris is an immediate mode UI library, as opposed to retained mode."),(0,a.kt)("p",null,"In a retained mode model, you might make a button and connect a clicked event, with code that is invoked when the event happens. The button is retained in the DataModel, and to change the text on it you need to store a reference to it."),(0,a.kt)("p",null,"But in an immediate mode model, call the button function and check if it's been clicked immediately, and you do that every single frame (60 times per second). There's no need for a clicked event or to store a reference to the button."),(0,a.kt)("p",null,"Check out the Dear ImGuis ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ocornut/imgui/wiki/About-the-IMGUI-paradigm"},"About the IMGUI paradigm")," section if you want to understand the core principles behind the IMGUI paradigm."),(0,a.kt)("h3",{id:"credits"},"Credits"),(0,a.kt)("p",null,"Developed By ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Michael-48"},"Michael_48"),". Design, Inspriation, Docs and Feedback: ",(0,a.kt)("a",{parentName:"p",href:"https://www.miracleworld.net/"},"Omar Cornut"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera"},"Evaera"),", and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/JakeyWasTaken"},"JakeyWasTaken"),". Thanks!"))}m.isMDXComponent=!0}}]);