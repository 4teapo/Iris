"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=o(n),p=i,g=h["".concat(d,".").concat(p)]||h[p]||u[p]||r;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[h]="string"==typeof e?e:i,s[1]=l;for(var o=2;o<r;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},61810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={},s="Creating Custom Widgets",l={unversionedId:"creatingCustomWidgets",id:"creatingCustomWidgets",title:"Creating Custom Widgets",description:"Iris comes with the function Iris.WidgetConstructor, which allows you to Construct your own widgets.",source:"@site/docs/creatingCustomWidgets.md",sourceDirName:".",slug:"/creatingCustomWidgets",permalink:"/Iris/docs/creatingCustomWidgets",draft:!1,editUrl:"https://github.com/Michael-48/Iris/edit/master/docs/creatingCustomWidgets.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",next:{title:"Iris",permalink:"/Iris/docs/intro"}},d={},o=[{value:"Generate:",id:"generate",level:3},{value:"Update:",id:"update",level:3},{value:"Discard:",id:"discard",level:3},{value:"Args:",id:"args",level:3},{value:"GenerateState",id:"generatestate",level:3},{value:"UpdateState",id:"updatestate",level:3},{value:"ChildAdded",id:"childadded",level:3},{value:"ChildDiscarded",id:"childdiscarded",level:3},{value:"When does a widget need to have state?",id:"when-does-a-widget-need-to-have-state",level:2}],c={toc:o},h="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-custom-widgets"},"Creating Custom Widgets"),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Iris comes with the function ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.WidgetConstructor"),", which allows you to Construct your own widgets. "),(0,i.kt)("p",null,"For Instance, This is the call to ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.WidgetConstructor")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Text")," widget:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Iris.WidgetConstructor("Text", false, false, {\n    Args = {\n        ["Text"] = 1\n    },\n    Generate = function(thisWidget)\n        local Text = Instance.new("TextLabel")\n        \n        ...\n\n        return Text\n    end,\n    Update = function(thisWidget)\n        ...\n    end,\n    Discard = function(thisWidget)\n        thisWidget.Instance:Destroy()\n    end\n})\n')),(0,i.kt)("p",null,"The First three arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type: string"),", which indicates the name of the widget"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hasState: boolean"),", which indicates if the widget uses any state"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hasChildren: boolean"),", which indicates if the widget is able to contain child widgets.")),(0,i.kt)("p",null,"In the instance of Iris.Text, It has no state, and it cant contain other children, so both are false."),(0,i.kt)("p",null,"The fourth argument contains the class for the widget. The methods which a widget class may have depend on the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"hasState")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hasChildren"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"All Widgets"),(0,i.kt)("th",{parentName:"tr",align:null},"Widgets with State"),(0,i.kt)("th",{parentName:"tr",align:null},"Widgets with Children"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Generate"),(0,i.kt)("td",{parentName:"tr",align:null},"GenerateState"),(0,i.kt)("td",{parentName:"tr",align:null},"ChildAdded")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Update"),(0,i.kt)("td",{parentName:"tr",align:null},"UpdateState"),(0,i.kt)("td",{parentName:"tr",align:null},"ChildDiscarded (optional)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Discard"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Args"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"generate"},"Generate:"),(0,i.kt)("p",null,"Generate is called when a widget is first instantiated. It should create all the instances and properly adjust them to fit the config properties.\nGenerate is also called when style properties change."),(0,i.kt)("p",null,"Generate should return the instance which acts as the root of the widget. (what should be parented to the parents designated Instance)"),(0,i.kt)("h3",{id:"update"},"Update:"),(0,i.kt)("p",null,"Update is called only after instantiation and when widget arguments have changed.\nFor instance, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Text")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Update = function(thisWidget)\n    local Text = thisWidget.Instance\n    if thisWidget.arguments.Text == nil then\n        error("Iris.Text Text Argument is required", 5)\n    end\n    Text.Text = thisWidget.arguments.Text\nend\n')),(0,i.kt)("h3",{id:"discard"},"Discard:"),(0,i.kt)("p",null,"Discard is called when the widget stops being displayed. In most cases the function body should resemble this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Discard = function(thisWidget)\n    thisWidget.Instance:Destroy()\nend\n")),(0,i.kt)("h3",{id:"args"},"Args:"),(0,i.kt)("p",null,"Args is a table, not a method. It enumerates all of the possible arguments which may be passed as arguments into the widget.\nThe order of the tables indicies indicate which position the Argument will be interpreted as. For instance, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Text"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Args = {\n    ["Text"] = 1\n}\n')),(0,i.kt)("p",null,"when a Text widget is generated, the first index of the Arguments table will be interpreted as the 'Text' parameter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Iris.Text({[1] = "Hello"})\n-- same result\nIris.Text({"Hello"})\n')),(0,i.kt)("p",null,"the ",(0,i.kt)("inlineCode",{parentName:"p"},"Update")," function can retrieve arguments from ",(0,i.kt)("inlineCode",{parentName:"p"},"thisWidget.arguments"),", such as ",(0,i.kt)("inlineCode",{parentName:"p"},"thisWidget.arguments.Text")),(0,i.kt)("h3",{id:"generatestate"},"GenerateState"),(0,i.kt)("p",null,"GenerateState is called when the widget is first Instantiated, It should generate any state objects which weren't passed as a state by the user.\nFor Instance, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Checkbox"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'GenerateState = function(thisWidget)\n    if thisWidget.state.isChecked == nil then\n        thisWidget.state.isChecked = Iris._widgetState(thisWidget, "checked", false)\n    end\nend\n')),(0,i.kt)("h3",{id:"updatestate"},"UpdateState"),(0,i.kt)("p",null,"UpdateState is called whenever ANY state objects are updated, using its :set() method.\nFor instance, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Checkbox"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'UpdateState = function(thisWidget)\n    local Checkbox = thisWidget.Instance.CheckboxBox\n    if thisWidget.state.isChecked.value then\n        Checkbox.Text = ICONS.CHECK_MARK\n        thisWidget.events.checked = true\n    else\n        Checkbox.Text = ""\n        thisWidget.events.unchecked = true\n    end\nend\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"calling :set() to any of a widget's own state objects inside of UpdateState may cause an infinite loop of state updates.\nUpdateState should avoid calling :set().")),(0,i.kt)("h3",{id:"childadded"},"ChildAdded"),(0,i.kt)("p",null,"ChildAdded is called when a widget is first Initiated and is a child of the widget. ChildAdded should return the Instance which the Child will be parented to."),(0,i.kt)("h3",{id:"childdiscarded"},"ChildDiscarded"),(0,i.kt)("p",null,"ChildDiscarded is called when a widget is Discarded and is a child of the widget. ChildDiscarded is optional."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"when-does-a-widget-need-to-have-state"},"When does a widget need to have state?"),(0,i.kt)("p",null,"State should only be used by widgets when there are properties which are able to be set by BOTH the widget, and by the user's code."),(0,i.kt)("p",null,"For Instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"Iris.Window")," has a state, ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),". This field can be changed by the user's code, to adjust or initiate the size, and the widget also changes the size when it is resized."),(0,i.kt)("p",null,"If the window was never able to change the size property, such as if there were no resize feature, then instead it should be an argument."),(0,i.kt)("p",null,"This table demonstrates the relation between User / Widget permissions, and where the field should belong inside the widget class."),(0,i.kt)("div",{align:"Left"},(0,i.kt)("img",{src:"https://raw.githubusercontent.com/Michael-48/Iris/main/assets/IrisHelpfulChart.png",alt:"Sample Display Output"})))}u.isMDXComponent=!0}}]);