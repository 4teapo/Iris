[{"title":"Iris","type":0,"sectionRef":"#","url":"/Iris/docs/intro","content":"Iris Iris is an Immediate mode GUI Library for Roblox, Based on Dear ImGui. It solves the same problems as Dear ImGui. It is fast, portable, and self-contained.","keywords":""},{"title":"State","type":0,"sectionRef":"#","url":"/Iris/api/State","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"State","url":"/Iris/api/State#functions","content":" "},{"title":"get​","type":1,"pageTitle":"State","url":"/Iris/api/State#get","content":"&lt;/&gt; State:get() → any Returns the states current value.  "},{"title":"set​","type":1,"pageTitle":"State","url":"/Iris/api/State#set","content":"&lt;/&gt; State:set() → () allows the caller to assign the state object a new value, and returns the new value.  "},{"title":"onChange​","type":1,"pageTitle":"State","url":"/Iris/api/State#onChange","content":"&lt;/&gt; State:onChange() → () Allows the caller to connect a callback which is called when the states value is changed. "},{"title":"Creating Custom Widgets","type":0,"sectionRef":"#","url":"/Iris/docs/creatingCustomWidgets","content":"","keywords":""},{"title":"Generate​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#generate","content":"Generate is called when a widget is first instantiated. It should create all the instances and properly adjust them to fit the config properties. Generate is also called when style properties change. Generate should return the instance which acts as the root of the widget. (what should be parented to the parents designated Instance) "},{"title":"Update​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#update","content":"Update is called only after instantiation and when widget arguments have changed. For instance, in Iris.Text Update = function(thisWidget) local Text = thisWidget.Instance if thisWidget.arguments.Text == nil then error(&quot;Iris.Text Text Argument is required&quot;, 5) end Text.Text = thisWidget.arguments.Text end  "},{"title":"Discard​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#discard","content":"Discard is called when the widget stops being displayed. In most cases the function body should resemble this: Discard = function(thisWidget) thisWidget.Instance:Destroy() end  "},{"title":"Events​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#events","content":"Events is a table, not a method. It contains all of the possible events which a widget can have. Lets look at the hovered event as an example. [&quot;hovered&quot;] = { [&quot;Init&quot;] = function(thisWidget) local hoveredGuiObject = thisWidget.Instance thisWidget.isHoveredEvent = false hoveredGuiObject.MouseEnter:Connect(function() thisWidget.isHoveredEvent = true end) hoveredGuiObject.MouseLeave:Connect(function() thisWidget.isHoveredEvent = false end) end, [&quot;Get&quot;] = function(thisWidget) return thisWidget.isHoveredEvent end }  Every event has 2 methods, Init and Get.Init is called when a widget first polls the value of an event. Because of this, you can instantiate events and variables for an event to only widgets which need it.Get is the actual function which is called by the call to an event (like Button.hovered()), it should return the event value. "},{"title":"Args​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#args","content":"Args is a table, not a method. It enumerates all of the possible arguments which may be passed as arguments into the widget. The order of the tables indicies indicate which position the Argument will be interpreted as. For instance, in Iris.Text: Args = { [&quot;Text&quot;] = 1 }  when a Text widget is generated, the first index of the Arguments table will be interpreted as the 'Text' parameter Iris.Text({[1] = &quot;Hello&quot;}) -- same result Iris.Text({&quot;Hello&quot;})  the Update function can retrieve arguments from thisWidget.arguments, such as thisWidget.arguments.Text "},{"title":"GenerateState​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#generatestate","content":"GenerateState is called when the widget is first Instantiated, It should generate any state objects which weren't passed as a state by the user. For Instance, in Iris.Checkbox: GenerateState = function(thisWidget) if thisWidget.state.isChecked == nil then thisWidget.state.isChecked = Iris._widgetState(thisWidget, &quot;checked&quot;, false) end end  "},{"title":"UpdateState​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#updatestate","content":"UpdateState is called whenever ANY state objects are updated, using its :set() method. For instance, in Iris.Checkbox: UpdateState = function(thisWidget) local Checkbox = thisWidget.Instance.CheckboxBox if thisWidget.state.isChecked.value then Checkbox.Text = ICONS.CHECK_MARK thisWidget.events.checked = true else Checkbox.Text = &quot;&quot; thisWidget.events.unchecked = true end end  caution calling :set() to any of a widget's own state objects inside of UpdateState may cause an infinite loop of state updates. UpdateState should avoid calling :set(). "},{"title":"ChildAdded​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#childadded","content":"ChildAdded is called when a widget is first Initiated and is a child of the widget. ChildAdded should return the Instance which the Child will be parented to. "},{"title":"ChildDiscarded​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#childdiscarded","content":"ChildDiscarded is called when a widget is Discarded and is a child of the widget. ChildDiscarded is optional.  "},{"title":"When does a widget need to have state?​","type":1,"pageTitle":"Creating Custom Widgets","url":"/Iris/docs/creatingCustomWidgets#when-does-a-widget-need-to-have-state","content":"State should only be used by widgets when there are properties which are able to be set by BOTH the widget, and by the user's code. For Instance, Iris.Window has a state, size. This field can be changed by the user's code, to adjust or initiate the size, and the widget also changes the size when it is resized. If the window was never able to change the size property, such as if there were no resize feature, then instead it should be an argument. This table demonstrates the relation between User / Widget permissions, and where the field should belong inside the widget class.  "},{"title":"Iris","type":0,"sectionRef":"#","url":"/Iris/api/Iris","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#properties","content":" "},{"title":"Args​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Args","content":"&lt;/&gt; Iris.Args: table Provides a list of every possible Argument for each type of widget. For instance, Iris.Args.Window.NoResize. The Args table is useful for using widget Arguments without remembering their order. Iris.Window({&quot;My Window&quot;, [Iris.Args.Window.NoResize] = true})   "},{"title":"TemplateConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#TemplateConfig","content":"&lt;/&gt; Iris.TemplateConfig: table TemplateConfig provides a table of default styles and configurations which you may apply to your UI. "},{"title":"Functions​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#functions","content":" "},{"title":"ForceRefresh​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ForceRefresh","content":"&lt;/&gt; Iris.ForceRefresh() → () Destroys and regenerates all instances used by Iris. useful if you want to propogate state changes. Caution: Performance Because this function Deletes and Initializes many instances, it may cause performance issues when used with many widgets. In no case should it be called every frame.  "},{"title":"WidgetConstructor​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#WidgetConstructor","content":"&lt;/&gt; Iris.WidgetConstructor( type: string,-- Name used to denote the widget widgetClass: table-- table of methods for the new widget ) → ()   "},{"title":"UpdateGlobalConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#UpdateGlobalConfig","content":"&lt;/&gt; Iris.UpdateGlobalConfig( deltaStyle: table-- a table containing the changes in style ex: {ItemWidth = UDim.new(0, 100)} ) → () Allows callers to customize the config which every widget will inherit from. It can be used along with Iris.TemplateConfig to easily swap styles, ex: Iris.UpdateGlobalConfig(Iris.TemplateConfig.colorLight) -- use light theme Caution: Performance this function internally calls Iris.ForceRefresh so that style changes are propogated, it may cause performance issues when used with many widgets. In no case should it be called every frame.  "},{"title":"PushConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#PushConfig","content":"&lt;/&gt; Iris.PushConfig( deltaStyle: table-- a table containing the changes in style ex: {ItemWidth = UDim.new(0, 100)} ) → () Allows callers to cascade a style, meaning that styles may be locally and hierarchically applied. Each call to Iris.PushConfig must be paired with a call to Iris.PopConfig. For example: Iris.PushConfig({TextColor = Color3.fromRGB(128, 0, 256)}) Iris.Text({&quot;Colored Text!&quot;}) Iris.PopConfig()   "},{"title":"PopConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#PopConfig","content":"&lt;/&gt; Iris.PopConfig() → () Ends a PushConfig style. Each call to Iris.PushConfig must be paired with a call to Iris.PopConfig.  "},{"title":"State​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#State","content":"&lt;/&gt; Iris.State( initialValue: any-- The initial value for the state ) → () Constructs a new state object, subsequent ID calls will return the same object info Iris.State allows you to create &quot;references&quot; to the same value while inside your UI drawing loop. For example: Iris:Connect(function() local myNumber = 5; myNumber = myNumber + 1 Iris.Text({&quot;The number is: &quot; .. myNumber}) end) This is problematic. Each time the function is called, a new myNumber is initialized, instead of retrieving the old one. The above code will always display 6. Iris.State solves this problem: Iris:Connect(function() local myNumber = Iris.State(5) myNumber:set(myNumber:get() + 1) Iris.Text({&quot;The number is: &quot; .. myNumber}) end) In this example, the code will work properly, and increment every frame.  "},{"title":"State​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#State","content":"&lt;/&gt; Iris.State( initialValue: any-- The initial value for the state ) → () Constructs a new state object, subsequent ID calls will return the same object, except all widgets connected to the state are discarded, the state reverts to the passed initialValue  "},{"title":"ComputedState​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ComputedState","content":"&lt;/&gt; Iris.ComputedState( firstState: State,-- State to bind to. onChangeCallback: function-- callback which should return a value transformed from the firstState value ) → () Constructs a new State object, but binds its value to the value of another State. info A common use case for this constructor is when a boolean State needs to be inverted: Iris.ComputedState(otherState, function(newValue) return not newValue end)   "},{"title":"Init​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Init","content":"&lt;/&gt; Iris.Init( parentInstance: Instance | nil,-- instance which Iris will place UI in. defaults to PlayerGui if unspecified eventConnection: RBXScriptSignal | () → {} | nil ) → Iris Initializes Iris. May only be called once. tip Want to stop Iris from rendering and consuming performance, but keep all the Iris code? simply comment out the Iris.Init() line in your codebase.  "},{"title":"Append​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Append","content":"&lt;/&gt; Iris.Append() → () Allows the caller to insert any Roblox Instance into the current parent Widget.  "},{"title":"End​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#End","content":"&lt;/&gt; Iris.End() → () This function marks the end of any widgets which contain children. For example: -- Widgets placed here **will not** be inside the tree Iris.Tree({&quot;My First Tree&quot;}) -- Widgets placed here **will** be inside the tree Iris.End() -- Widgets placed here **will not** be inside the tree Caution: Error Seeing the error Callback has too few calls to Iris.End() or Callback has too many calls to Iris.End()? Using the wrong amount of Iris.End() calls in your code will lead to an error. Each widget called which might have children should be paired with a call to Iris.End(), Even if the Widget doesnt currently have any children.  "},{"title":"ShowDemoWindow​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ShowDemoWindow","content":"&lt;/&gt; Iris.ShowDemoWindow() → () ShowDemoWindow is a function which creates a Demonstration window. this window contains many useful utilities for coders, and serves as a refrence for using each part of the library. Ideally, the DemoWindow should always be available in your UI.  "},{"title":"Connect​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Connect","content":"&lt;/&gt; Iris:Connect( callback: function-- allows users to connect a function which will execute every Iris cycle, (cycle is determined by the callback or event passed to Iris.Init) ) → ()  "},{"title":"Widgets","type":0,"sectionRef":"#","url":"/Iris/api/Widgets","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#properties","content":" "},{"title":"Text​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Text","content":"&lt;/&gt; Widgets.Text: Widget A simple Textbox. hasChildren: false, hasState: false, Arguments: { Text: String }, Events: { hovered: boolean }   "},{"title":"TextColored​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#TextColored","content":"&lt;/&gt; Widgets.TextColored: Widget A simple Textbox, which has colored text. hasChildren: false, hasState: false, Arguments: { Text: String, Color: Color3 }, Events: { hovered: boolean }   "},{"title":"TextWrapped​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#TextWrapped","content":"&lt;/&gt; Widgets.TextWrapped: Widget A simple Textbox, which has wrapped text. The width of the text is determined by the ItemWidth config field. hasChildren: false, hasState: false, Arguments: { Text: String, Color: Color3 }, Events: { hovered: boolean }   "},{"title":"Button​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Button","content":"&lt;/&gt; Widgets.Button: Widget A simple button. hasChildren: false, hasState: false, Arguments: { Text: String }, Events: { clicked: boolean, hovered: boolean }   "},{"title":"SmallButton​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SmallButton","content":"&lt;/&gt; Widgets.SmallButton: Widget A simple button, with reduced padding. hasChildren: false, hasState: false, Arguments: { Text: String }, Events: { clicked: boolean, hovered: boolean }   "},{"title":"Separator​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Separator","content":"&lt;/&gt; Widgets.Separator: Widget A vertical or horizonal line, depending on the context, which visually seperates widgets. hasChildren: false, hasState: false   "},{"title":"Indent​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Indent","content":"&lt;/&gt; Widgets.Indent: Widget Indents its child widgets. hasChildren: true, hasState: false, Arguments: { Width: Number }   "},{"title":"SameLine​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SameLine","content":"&lt;/&gt; Widgets.SameLine: Widget Positions its children in a row, horizontally hasChildren: true, hasState: false, Arguments: { Width: Number VerticalAlignment: Enum.VerticalAlignment }   "},{"title":"Group​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Group","content":"&lt;/&gt; Widgets.Group: Widget Layout Widget, contains its children as a single group hasChildren: true, hasState: false   "},{"title":"Checkbox​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Checkbox","content":"&lt;/&gt; Widgets.Checkbox: Widget A checkbox which can be checked or unchecked. hasChildren: false, hasState: true, Arguments: { Text: string }, Events: { checked: boolean, unchecked: boolean, hovered: boolean }, States: { isChecked: boolean }   "},{"title":"RadioButton​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#RadioButton","content":"&lt;/&gt; Widgets.RadioButton: Widget A single button used to represent a single state when used with multiple radio buttons. hasChildren: false, hasState: true, Arguments: { Text: string, Index: any }, Events: { activated: boolean, deactivated: boolean, hovered: boolean }, States: { index: any }   "},{"title":"Tree​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Tree","content":"&lt;/&gt; Widgets.Tree: Widget A collapsable tree which contains children, positioned vertically. hasChildren: true, hasState: true, Arguments: { Text: string, SpanAvailWidth: boolean, NoIndent: boolean }, Events: { collapsed: boolean, uncollapsed: boolean, hovered: boolean }, States: { isUncollapsed: boolean }   "},{"title":"CollapsingHeader​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#CollapsingHeader","content":"&lt;/&gt; Widgets.CollapsingHeader: Widget A collapsable header designed for top level window widget management. hasChildren: true, hasState: true, Arguments: { Text: string, }, Events: { collapsed: boolean, uncollapsed: boolean, hovered: boolean }, States: { isUncollapsed: boolean }   "},{"title":"DragNum​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#DragNum","content":"&lt;/&gt; Widgets.DragNum: Widget A field which allows the user to click and drag their cursor to enter a number You can ctrl + click to directly input a number, like InputNum You can hold Shift to increase speed, and Alt to decrease speed hasChildren: false, hasState: true, Arguments: { Text: string, Increment: number, Min: number, Max: number, Format: string, }, Events: { numberChanged: boolean, hovered: boolean }, States: { number: number, editingText: boolean }   "},{"title":"SliderNum​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SliderNum","content":"&lt;/&gt; Widgets.SliderNum: Widget A field which allows the user to slide a grip to enter a number within a range You can ctrl + click to directly input a number, like InputNum hasChildren: false, hasState: true, Arguments: { Text: string, Increment: number, Min: number, Max: number, Format: string, }, Events: { numberChanged: boolean, hovered: boolean }, States: { number: number, editingText: boolean }   "},{"title":"InputNum​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputNum","content":"&lt;/&gt; Widgets.InputNum: Widget A field which allows the user to enter a number. Also has buttons to increment and decrement the number. hasChildren: false, hasState: true, Arguments: { Text: string, Increment: number, Min: number, Max: number, Format: string, NoButtons: boolean, NoField: boolean }, Events: { numberChanged: boolean, hovered: boolean }, States: { number: number }   "},{"title":"InputVector2​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputVector2","content":"&lt;/&gt; Widgets.InputVector2: Widget A field which allows for the input of a Vector2. hasChildren: false, hasState: true, Arguments: { Text: string, Increment: Vector2, Min: Vector2, Max: Vector2, Format: string }, Events: { numberChanged: boolean }, States: { number: Vector2 }   "},{"title":"InputVector3​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputVector3","content":"&lt;/&gt; Widgets.InputVector3: Widget A field which allows for the input of a Vector3. hasChildren: false, hasState: true, Arguments: { Text: string, Increment: Vector3, Min: Vector3, Max: Vector3, Format: string }, Events: { numberChanged: boolean }, States: { number: Vector3 }   "},{"title":"InputUDim​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputUDim","content":"&lt;/&gt; Widgets.InputUDim: Widget A field which allows for the input of a UDim. hasChildren: false, hasState: true, Arguments: { Text: string, Increment: UDim, Min: UDim, Max: UDim, Format: string }, Events: { numberChanged: boolean }, States: { number: UDim }   "},{"title":"InputUDim2​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputUDim2","content":"&lt;/&gt; Widgets.InputUDim2: Widget A field which allows for the input of a UDim2. hasChildren: false, hasState: true, Arguments: { Text: string, Increment: UDim2, Min: UDim2, Max: UDim2, Format: string }, Events: { numberChanged: boolean }, States: { number: UDim }   "},{"title":"InputColor3​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputColor3","content":"&lt;/&gt; Widgets.InputColor3: Widget A field which allows for the input of a Color3. hasChildren: false, hasState: true, Arguments: { Text: string, UseFloats: boolean, UseHSV: boolean, Format: string }, Events: { numberChanged: boolean }, States: { color: Color3 }   "},{"title":"InputColor4​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputColor4","content":"&lt;/&gt; Widgets.InputColor4: Widget A field which allows for the input of a Color3 and transparency. hasChildren: false, hasState: true, Arguments: { Text: string, UseFloats: boolean, UseHSV: boolean, Format: string }, Events: { numberChanged: boolean }, States: { color: Color3, transparency: number }   "},{"title":"InputText​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputText","content":"&lt;/&gt; Widgets.InputText: Widget A field which allows the user to enter text. hasChildren: false, hasState: true, Arguments: { Text: string, TextHint: string }, Events: { textChanged: boolean, hovered: boolean } States: { text: string }   "},{"title":"Tooltip​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Tooltip","content":"&lt;/&gt; Widgets.Tooltip: Widget Displays a text label next to the cursor hasChildren: false, hasState: false, Arguments: { Text: string, }   "},{"title":"Selectable​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Selectable","content":"&lt;/&gt; Widgets.Selectable: Widget An object which can be selected. hasChildren: false, hasState: true, Arguments: { Text: string, Index: any, NoClick: boolean }, Events: { selected: boolean, unselected: boolean, active: boolean }, States: { index: any }   "},{"title":"Combo​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Combo","content":"&lt;/&gt; Widgets.Combo: Widget A selection box to choose a value from a range of values. hasChildren: true, hasState: true, Arguments: { Text: string, NoButton: boolean, NoPreview: boolean }, Events: { opened: boolean, closed: boolean, clicked: boolean }, States: { index: any, isOpened: boolean }   "},{"title":"ComboArray​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#ComboArray","content":"&lt;/&gt; Widgets.ComboArray: Widget A selection box to choose a value from an array. hasChildren: true, hasState: true, Arguments: { Text: string, NoButton: boolean, NoPreview: boolean }, Events: { opened: boolean, closed: boolean, clicked: boolean }, States: { index: any, isOpened: boolean }, Extra: { selectionArray: { any } }   "},{"title":"InputEnum​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputEnum","content":"&lt;/&gt; Widgets.InputEnum: Widget A selection box to choose a value from an Enum. hasChildren: true, hasState: true, Arguments: { Text: string, NoButton: boolean, NoPreview: boolean }, Events: { opened: boolean, closed: boolean, clicked: boolean }, States: { index: any, isOpened: boolean }, Extra: { enumType: Enum }   "},{"title":"Table​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Table","content":"&lt;/&gt; Widgets.Table: Widget A layout widget which allows children to be displayed in configurable columns and rows. hasChildren: true, hasState: false, Arguments: { NumColumns: number, RowBg: boolean, BordersOuter: boolean, BordersInner: boolean }, Events: { hovered: boolean }   "},{"title":"Window​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Window","content":"&lt;/&gt; Widgets.Window: Widget A Window. should be used to contain most other Widgets. Cannot be inside other Widgets. hasChildren: true, hasState: true, Arguments: { Title: string, NoTitleBar: boolean, NoBackground: boolean, NoCollapse: boolean, NoClose: boolean, NoMove: boolean, NoScrollbar: boolean, NoResize: boolean }, Events: { closed: boolean, opened: boolean, collapsed: boolean, uncollapsed: boolean, hovered: boolean }, States: { size: Vector2, position: Vector2, isUncollapsed: boolean, isOpened: boolean, scrollDistance: number }  "},{"title":"Functions​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#functions","content":" "},{"title":"NextColumn​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#NextColumn","content":"&lt;/&gt; Widgets.NextColumn() → () In a table, moves to the next available cell. if the current cell is in the last column, then the next cell will be the first column of the next row.  "},{"title":"SetColumnIndex​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SetColumnIndex","content":"&lt;/&gt; Widgets.SetColumnIndex(index: number) → () In a table, directly sets the index of the column  "},{"title":"NextRow​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#NextRow","content":"&lt;/&gt; Widgets.NextRow() → () In a table, moves to the next available row, skipping cells in the previous column if the last cell wasn't in the last column  "},{"title":"SetFocusedWindow​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SetFocusedWindow","content":"&lt;/&gt; Widgets.SetFocusedWindow(thisWidget: table) → () sets the Window widget to be focused "}]