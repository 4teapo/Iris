[{"title":"State","type":0,"sectionRef":"#","url":"/Iris/api/State","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"State","url":"/Iris/api/State#functions","content":" "},{"title":"get​","type":1,"pageTitle":"State","url":"/Iris/api/State#get","content":"&lt;/&gt; State:get() → any Returns the states current value.  "},{"title":"set​","type":1,"pageTitle":"State","url":"/Iris/api/State#set","content":"&lt;/&gt; State:set() → () allows the caller to assign the state object a new value.  "},{"title":"onChange​","type":1,"pageTitle":"State","url":"/Iris/api/State#onChange","content":"&lt;/&gt; State:onChange() → () Allows the caller to connect a callback which is called when the states value is changed. "},{"title":"Widgets","type":0,"sectionRef":"#","url":"/Iris/api/Widgets","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#properties","content":" "},{"title":"Text​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Text","content":"&lt;/&gt; Widgets.Text: Widget A simple Textbox. {hasChildren: false, hasState: false} Arguments Text: String  "},{"title":"TextWrapped​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#TextWrapped","content":"&lt;/&gt; Widgets.TextWrapped: Widget {hasChildren: false, hasState: false} A simple Textbox, which has wrapped text. The width of the text is determined by the ItemWidth config field. Arguments Text: String  "},{"title":"Button​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Button","content":"&lt;/&gt; Widgets.Button: Widget A simple button. {hasChildren: false, hasState: false} Arguments Text: String Events clicked: boolean  "},{"title":"SmallButton​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SmallButton","content":"&lt;/&gt; Widgets.SmallButton: Widget A simple button, with reduced padding. {hasChildren: false, hasState: false} Arguments Text: String Events clicked: boolean  "},{"title":"Separator​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Separator","content":"&lt;/&gt; Widgets.Separator: Widget A vertical or horizonal line, depending on the context, which visually seperates widgets. {hasChildren: false, hasState: false}   "},{"title":"Indent​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Indent","content":"&lt;/&gt; Widgets.Indent: Widget Indents its child widgets. {hasChildren: true, hasState: false} Arguments Width: Number  "},{"title":"SameLine​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#SameLine","content":"&lt;/&gt; Widgets.SameLine: Widget Positions its children in a row, horizontally {hasChildren: true, hasState: false} Arguments Width: Number VerticalAlignment: Enum.VerticalAlignment  "},{"title":"Group​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Group","content":"&lt;/&gt; Widgets.Group: Widget Layout Widget, contains its children as a single group {hasChildren: true, hasState: false}   "},{"title":"Checkbox​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Checkbox","content":"&lt;/&gt; Widgets.Checkbox: Widget A checkbox which can be checked or unchecked. {hasChildren: false, hasState: true} Arguments Text: string Events checked: boolean unchecked: boolean States isChecked: boolean  "},{"title":"Tree​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Tree","content":"&lt;/&gt; Widgets.Tree: Widget A collapsable tree which contains children, positioned vertically. {hasChildren: true, hasState: true} Arguments Text: string SpanAvailWidth: boolean NoIndent: boolean Events collapsed: boolean uncollapsed: boolean States isUncollapsed: boolean  "},{"title":"InputNum​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputNum","content":"&lt;/&gt; Widgets.InputNum: Widget A field which allows the user to enter a number. Also has buttons to increment and decrement the number. {hasChildren: false, hasState: true} Arguments Text: string Increment: number Min: number Max: number Format: string NoButtons: boolean NoField: boolean Events numberChanged: boolean States number: number  "},{"title":"InputText​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#InputText","content":"&lt;/&gt; Widgets.InputText: Widget A field which allows the user to enter text. {hasChildren: false, hasState: true} Arguments Text: string TextHint: string Events textChanged: boolean States text: string  "},{"title":"Table​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Table","content":"&lt;/&gt; Widgets.Table: Widget A layout widget which allows children to be displayed in configurable columns and rows. {hasChildren: true, hasState: false} Arguments NumColumns: number RowBg: boolean BordersOuter: boolean BordersInner: boolean  "},{"title":"Window​","type":1,"pageTitle":"Widgets","url":"/Iris/api/Widgets#Window","content":"&lt;/&gt; Widgets.Window: Widget A Window. should be used to contain most other Widgets. Cannot be inside other Widgets. {hasChildren: true, hasState: true} Arguments Title: string NoTitleBar: boolean NoBackground: boolean NoCollapse: boolean NoClose: boolean NoMove: boolean NoScrollbar: boolean NoResize: boolean Events closed: boolean opened: boolean collapsed: boolean uncollapsed: boolean States size: Vector2 position: Vector2 isUncollapsed: boolean isOpened: boolean scrollDistance: number "},{"title":"Iris","type":0,"sectionRef":"#","url":"/Iris/api/Iris","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#properties","content":" "},{"title":"Args​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Args","content":"&lt;/&gt; Iris.Args: table Provides a list of every possible Argument for each type of widget. For instance, Iris.Args.Window.NoResize. The Args table is useful for using widget Arguments without remembering their order. Iris.Window({&quot;My Window&quot;, [Iris.Args.Window.NoResize] = true})   "},{"title":"TemplateConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#TemplateConfig","content":"&lt;/&gt; Iris.TemplateConfig: table TemplateConfig provides a table of default styles and configurations which you may apply to your UI. "},{"title":"Functions​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#functions","content":" "},{"title":"ForceRefresh​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ForceRefresh","content":"&lt;/&gt; Iris.ForceRefresh() → () Destroys and regenerates all instances used by Iris. useful if you want to propogate state changes. Caution: Performance Because this function Deletes and Initializes many instances, it may cause performance issues when used with many widgets. In no case should it be called every frame.  "},{"title":"WidgetConstructor​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#WidgetConstructor","content":"&lt;/&gt; Iris.WidgetConstructor( type: string,-- Name used to denote the widget hasState: boolean,-- Indicates if the widget will use any state hasChildren: boolean,-- Indicates if the widget will possibly contain any children widgetFunctions: table-- table of methods for the new widget ) → ()   "},{"title":"UpdateGlobalConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#UpdateGlobalConfig","content":"&lt;/&gt; Iris.UpdateGlobalConfig( deltaStyle: table-- a table containing the changes in style ex: {ItemWidth = UDim.new(0, 100)} ) → () Allows callers to customize the config which every widget will inherit from. It can be used along with Iris.TemplateConfig to easily swap styles, ex: Iris.UpdateGlobalConfig(Iris.TemplateConfig.colorLight) -- use light theme Caution: Performance this function internally calls Iris.ForceRefresh so that style changes are propogated, it may cause performance issues when used with many widgets. In no case should it be called every frame.  "},{"title":"PushConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#PushConfig","content":"&lt;/&gt; Iris.PushConfig( deltaStyle: table-- a table containing the changes in style ex: {ItemWidth = UDim.new(0, 100)} ) → () Allows callers to cascade a style, meaning that styles may be locally and hierarchically applied. Each call to Iris.PushConfig must be paired with a call to Iris.PopConfig. For example: Iris.PushConfig({TextColor = Color3.fromRGB(128, 0, 256)}) Iris.Text({&quot;Colored Text!&quot;}) Iris.PopConfig()   "},{"title":"PopConfig​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#PopConfig","content":"&lt;/&gt; Iris.PopConfig() → () Ends a PushConfig style. Each call to Iris.PushConfig must be paired with a call to Iris.PopConfig.  "},{"title":"State​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#State","content":"&lt;/&gt; Iris.State( initialValue: any-- The initial value for the state ) → () Constructs a new state object, subsequent ID calls will return the same object info Iris.State allows you to create &quot;references&quot; to the same value while inside your UI drawing loop. For example: Iris:Connect(function() local myNumber = 5; myNumber = myNumber + 1 Iris.Text({&quot;The number is: &quot; .. myNumber}) end) This is problematic. Each time the function is called, a new myNumber is initialized, instead of retrieving the old one. The above code will always display 6. Iris.State solves this problem: Iris:Connect(function() local myNumber = Iris.State(5) myNumber:set(myNumber:get() + 1) Iris.Text({&quot;The number is: &quot; .. myNumber}) end) In this example, the code will work properly, and increment every frame.  "},{"title":"ComputedState​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ComputedState","content":"&lt;/&gt; Iris.ComputedState( firstState: State,-- State to bind to. onChangeCallback: function-- callback which should return a value transformed from the firstState value ) → () Constructs a new State object, but binds its value to the value of another State. info A common use case for this constructor is when a boolean State needs to be inverted: Iris.ComputedState(otherState, function(newValue) return not newValue end)   "},{"title":"Init​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Init","content":"&lt;/&gt; Iris.Init( parentInstance: Instance | nil,-- instance which Iris will place UI in. defaults to PlayerGui if unspecified eventConnection: RBXScriptSignal | () → {} | nil ) → Iris Initializes Iris. May only be called once. tip Want to stop Iris from rendering and consuming performance, but keep all the Iris code? simply comment out the Iris.Init() line in your codebase.  "},{"title":"Append​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#Append","content":"&lt;/&gt; Iris.Append() → () Allows the caller to insert any Roblox Instance into the current parent Widget.  "},{"title":"End​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#End","content":"&lt;/&gt; Iris.End() → () This function marks the end of any widgets which contain children. For example: -- Widgets placed here **will not** be inside the tree Iris.Tree({&quot;My First Tree&quot;}) -- Widgets placed here **will** be inside the tree Iris.End() -- Widgets placed here **will not** be inside the tree Caution: Error Seeing the error Callback has too few calls to Iris.End() or Callback has too many calls to Iris.End()? Using the wrong amount of Iris.End() calls in your code will lead to an error. Each widget called which might have children should be paired with a call to Iris.End(), Even if the Widget doesnt currently have any children.  "},{"title":"ShowDemoWindow​","type":1,"pageTitle":"Iris","url":"/Iris/api/Iris#ShowDemoWindow","content":"&lt;/&gt; Iris.ShowDemoWindow() → () ShowDemoWindow is a function which creates a Demonstration window. this window contains many useful utilities for coders, and serves as a refrence for using every aspect of the library. Ideally, the DemoWindow should always be available through your UI. "}]